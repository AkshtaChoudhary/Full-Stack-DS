name: Python Package Build and Test

on:
  push:
    branches:
      - enh/issue#8/model-monitoring
jobs:
  style_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          which uv || echo "uv not installed"

      - name: Create venv and install tools
        run: |
          uv venv
          echo "$PWD/.venv/bin" >> $GITHUB_PATH
          uv pip install -e ".[formatter]"

      - name: Run isort
        run: |
          isort src/ tests/

      - name: Run black
        run: |
          black src/ tests/

      - name: Run flake8
        run: |
          flake8 src/ tests/ --max-line-length=90

  func_test:
    runs-on: ubuntu-latest
    needs: style_test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          which uv || echo "uv not installed"

      - name: Create venv and install tools
        run: |
          uv venv
          echo "$PWD/.venv/bin" >> $GITHUB_PATH
          uv pip install -e ".[test]"

      - name: Install in dev mode
        run: uv pip install -e .

      - name: Run tests with pytest
        run: |
          pytest tests/

  build:
    runs-on: ubuntu-latest
    needs: func_test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          which uv || echo "uv not installed"

      - name: Create venv and install tools
        run: |
          uv venv
          echo "$PWD/.venv/bin" >> $GITHUB_PATH
          uv pip install -r pyproject.toml
          uv pip install -e ".[build_p]"

      - name: Install build module
        run: uv pip install build

      - name: Install tree
        run: sudo apt-get update && sudo apt-get install -y tree

      - name: Show directory tree before build
        run: tree -L 3

      - name: Build package
        run: |
          python -m build

      - name: Show directory tree after build
        run: tree -L 3

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  install:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          which uv || echo "uv not installed"

      - name: Create venv and install tools
        run: |
          uv venv
          echo "$PWD/.venv/bin" >> $GITHUB_PATH

      - name: Install built package
        run: |
          uv pip install dist/*.whl

      - name: Show directory after installing wheel file
        run: tree -L 3

      - name: Data ingest
        run: |
          python scripts/ingest.py 2>&1 | while IFS= read -r line; do echo "$(date '+%Y-%m-%d %H:%M:%S') $line"; done

      - name: Model training
        run: |
          python scripts/train.py --config config/config.yaml 2>&1 | while IFS= read -r line; do echo "$(date '+%Y-%m-%d %H:%M:%S') $line"; done

      - name: Confirm model file exists
        run: |
          ls -lh artifacts/model

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: artifacts/model
          include-hidden-files: True

      - name: Model scoring
        run: |
          python scripts/score.py 2>&1 | while IFS= read -r line; do echo "$(date '+%Y-%m-%d %H:%M:%S') $line"; done
  
  model-monitor:
    name: Drift and Model Quality Check
    runs-on: ubuntu-latest
    needs: install

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
       
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -e ".[build_p,test]"

      - name: Run drift and quality check
        id: driftcheck
        run: |
          source .venv/bin/activate
          set +e  # don't exit immediately on failure
          python scripts/monitor.py > drift_output.log 2>&1
          EXIT_CODE=$?
          echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT

          echo "========== Drift & Quality Check Output =========="
          cat drift_output.log
          echo "=================================================="

          # Surface results to GitHub annotations
          if [ "$EXIT_CODE" -ne 0 ]; then
            echo "::error title=Drift/Quality Alert::Model drift or quality degradation detected. Check logs above."
          else
            echo "::notice title=Drift/Quality Check Passed::No drift or quality issues detected."
          fi

          exit $EXIT_CODE

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: model-monitor

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: List downloaded artifacts dist
        run: tree dist

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts
          path: artifacts

      - name: List downloaded artifacts
        run: tree artifacts

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/fsds-inference:latest .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/fsds-inference:latest

  pull-container-run:
    name: Pull and Test Docker Container
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Pull container image from ACR
        run: docker pull ${{ secrets.ACR_LOGIN_SERVER }}/fsds-inference:latest

      - name: Run container and test endpoint
        run: |
          INPUT_JSON='{"longitude": [-122.23], "latitude": [37.88], "housing_median_age": [41], "total_rooms": [880], "total_bedrooms": [129], "population": [322], "households": [126], "median_income": [8.3252], "median_house_value": [452600], "ocean_proximity": ["NEAR BAY"]}'
          
          docker run --rm --name test_container ${{ secrets.ACR_LOGIN_SERVER }}/fsds-inference:latest \
            --model rf_gs_model.pkl \
            --input "$INPUT_JSON" \
            --output predictions.csv \
            --log-level INFO \
            --log-path app/logs

          docker stop test_container || echo "Container already stopped"
